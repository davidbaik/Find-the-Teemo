package ca.cmpt276.as3.findtheteemo;

import android.os.Bundle;
import android.app.Activity;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.view.View;
import android.widget.Button;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

public class GameActivity extends Activity {

	private final static int SMALL_NUM_ROWS = 3;
	private final static int SMALL_NUM_COLS = 4;
	private final static int MEDIUM_NUM_ROWS = 4;
	private final static int MEDIUM_NUM_COLS = 6;
	private final static int LARGE_NUM_ROWS = 6;
	private final static int LARGE_NUM_COLS = 10;
	
	private Button[][] buttons = null; 

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_game);
		if (getBoardSize() == 0) {
			populateGameBoard(SMALL_NUM_ROWS, SMALL_NUM_COLS);
		} else if (getBoardSize() == 1) {
			populateGameBoard(MEDIUM_NUM_ROWS, MEDIUM_NUM_COLS);
		} else {
			populateGameBoard(LARGE_NUM_ROWS, LARGE_NUM_COLS);
		}
		
		setupTeemoCountDisplay();
		incrementNumberGamesStarted();
		setupNumGamesStartedDisplay();
	}
	
	private void setupTeemoCountDisplay() {
		TextView view = (TextView) findViewById(R.id.txtTeemosFound);
		String message = (String) getResources().getText(R.string.teemos_found);
		message += GameLogic.test();
		view.setText(message);
	}

	private void incrementNumberGamesStarted() {
		SharedPreferences runStats = getSharedPreferences("GameStats", MODE_PRIVATE);
        int timesRun = runStats.getInt("TimesLoaded", 0);
        
        timesRun++;

        SharedPreferences.Editor prefEditor = runStats.edit();
        prefEditor.putInt("TimesLoaded", timesRun);
        prefEditor.commit();	
	}

	private void setupNumGamesStartedDisplay() {
		TextView view = (TextView) findViewById(R.id.txtTimesPlayed);
		String message = (String) getResources().getText(R.string.times_played);
		message += getNumberTimesStarted();
		view.setText(message);
	}
	private int getNumberTimesStarted() {
	        SharedPreferences runStats = getSharedPreferences("GameStats", MODE_PRIVATE);
	        return runStats.getInt("TimesLoaded", 0);         
	}

	private int getBoardSize() {
		SharedPreferences size = getSharedPreferences("BoardSize", MODE_PRIVATE);
		return size.getInt("BoardSizeIndex", 0);
	}
	
	private void populateGameBoard(final int numRows, final int numCols) {
		TableLayout gameBoard = (TableLayout) findViewById(R.id.gameBoard);
		buttons = new Button[numRows][numCols];
		
		for (int row = 0; row < numRows; row++) {
			TableRow tableRow = new TableRow(this);
			tableRow.setLayoutParams(new TableLayout.LayoutParams(
					TableLayout.LayoutParams.MATCH_PARENT,
					TableLayout.LayoutParams.MATCH_PARENT,
					1.0f));
			gameBoard.addView(tableRow);
			
			for (int col = 0; col < numCols; col++) {
    			final int FINAL_COL = col;
    			final int FINAL_ROW = row;
    			
				Button button = new Button(this);
				button.setLayoutParams(new TableRow.LayoutParams(
						TableRow.LayoutParams.MATCH_PARENT,
						TableRow.LayoutParams.MATCH_PARENT,
						1.0f));
				
				// button.setText("" + col + "," + row);
				
				button.setOnClickListener(new View.OnClickListener() {
					
					@Override
					public void onClick(View arg0) {
						// Lock Button Sizes:
						lockButtonSizes(numRows, numCols);
						// CALL A METHOD HERE (GameLogic.java)
						setButtonMiss(FINAL_COL, FINAL_ROW); //DEBUGGGGGGGGGGGGGGGG
					}
				});
				
				tableRow.addView(button);
				buttons[row][col] = button;
			}
		}
	}
	private void lockButtonSizes(int numRows, int numCols) {
		for (int row = 0; row < numRows; row++) {
			for (int col = 0; col < numCols; col++) {
				Button button = buttons[row][col];
				
				int width = button.getWidth();
				button.setMinWidth(width);
				button.setMaxWidth(width);
				
				int height = button.getHeight();
				button.setMinHeight(height);
				button.setMaxHeight(height);
			}
		}	
	}
	
	public void setButtonHit(int col, int row) {
//    	Toast.makeText(this, "Button clicked: " + col + "," + row, Toast.LENGTH_SHORT).show();
    	Button button = buttons[row][col];
    	
    	// Scale image to button: Only works in JellyBean!
		int newWidth = button.getWidth();
		int newHeight = button.getHeight();
		Bitmap originalBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.teemo_camouflage); //FIX IMAGE USED HERE
		Bitmap scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, newWidth, newHeight, true);
		Resources resource = getResources();
		button.setBackground(new BitmapDrawable(resource, scaledBitmap));
		
		// Change text on button:
//		button.setText("" + col);
	}
	
	public void setButtonMiss(int col, int row) {
//    	Toast.makeText(this, "Button clicked: " + col + "," + row, Toast.LENGTH_SHORT).show();
		Button button = buttons[row][col];
		
		// Scale image to button: Only works in JellyBean!
		int newWidth = button.getWidth();
		int newHeight = button.getHeight();
		Bitmap originalBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.warning); //FIX IMAGE USED HERE
		Bitmap scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, newWidth, newHeight, true);
		Resources resource = getResources();
		button.setBackground(new BitmapDrawable(resource, scaledBitmap));
		
		// Change text on button:
//		button.setText("#");
		setButtonText(col, row, 7);
	}
	
	public void setButtonText(int col, int row, int value) {
		Button button = buttons[row][col];
		button.setText("" + col + " " + row);
	}
}
